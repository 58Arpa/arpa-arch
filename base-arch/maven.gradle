apply plugin: 'maven-publish'
afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                groupId "${mvnGroupId}"
                artifactId "${pomArtifactId}"
                version getVersionName()
                description "${pomDesc}"
                // 必须有这个 否则不会上传AAR包
                afterEvaluate { artifact(tasks.getByName("bundleReleaseAar")) }
                artifact generateSourcesJar
                //依赖关系
                pom.withXml {
                    def dependenciesNode = asNode().appendNode("dependencies")
                    configurations.implementation.allDependencies.forEach() {
                        Dependency dependency ->
                            if (dependency.version != "unspecified" && dependency.name != "unspecified") {
                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                dependencyNode.appendNode('groupId', dependency.group)
                                dependencyNode.appendNode('artifactId', dependency.name)
                                dependencyNode.appendNode('version', dependency.version)
                            }
                    }
                }
            }
        }

        repositories {
            maven {
                // 基于版本名称选择不同的仓库地址
                def releasesRepoUrl = "${mvnRepo}"
                def snapshotsRepoUrl = "${mvnRepoSnap}"
                // 仓库名
                name = "Nexus"
                // url是必须要配置的
                url = versionName.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                //允许使用 http
                allowInsecureProtocol = true
                // 仓库用户名密码
                credentials {
                    username = "${mvnUser}"
                    password = "${mvnPass}"
                }
            }
        }
    }
}

tasks.register('generateSourcesJar', Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier "sources"
}

def getVersionName() {
    def pomFile = file("gradle.properties")
    def pomConfig = new Properties()
    pomConfig.load(new InputStreamReader(new FileInputStream(pomFile), "utf-8"))

    def version = pomConfig['pomVersion']
    def isSnap = pomConfig['pomSnapshot'].toBoolean()
    if (isSnap) version += "-SNAPSHOT"

    return version
}
